/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientPackage;

import java.awt.event.WindowEvent;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Socket;
import java.net.SocketException;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author Aidan
 */
public class LoginFrame extends javax.swing.JFrame {

    /**
     * Creates new form LoginFrame
     */
    public LoginFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnCreateAccount = new javax.swing.JButton();
        btnLogin = new javax.swing.JButton();
        jtfUsername = new javax.swing.JTextField();
        jlbUsername = new javax.swing.JLabel();
        jlbPassword = new javax.swing.JLabel();
        jtfPassword = new javax.swing.JTextField();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnCreateAccount.setText("Create Account");
        btnCreateAccount.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAccountActionPerformed(evt);
            }
        });

        btnLogin.setText("Log In");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        jtfUsername.setToolTipText("");

        jlbUsername.setText("Username");

        jlbPassword.setText("Password");

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(btnCreateAccount)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlbPassword)
                    .addComponent(jlbUsername)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jtfUsername, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfPassword, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnLogin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(79, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jlbUsername)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addComponent(jlbPassword)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogin)
                    .addComponent(btnCreateAccount)
                    .addComponent(btnExit))
                .addContainerGap(110, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private static boolean loginAllow = false;
    private static boolean usernameReply = false;
    private static boolean passwordReply = false;
    public static Socket s;
    public static DataInputStream dis;
    public static DataOutputStream dos;
//    private static String ipAddress = "192.xxx.xxx.xxx"; used for remote client connections to server ip address
    private static String ipAddress = "localhost";// used for only connecting multiple instances of clients on the server device itself
//    if the server is also running 2 client instances, the messages displayed as received by the sending client 
//    instance (both run by the server device) will display double message output, because the 2 client instances are 
//    each saving the message to the same device's database
    
    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        if (testInputFields()) {
            checkLoginDetails(jtfUsername.getText(), jtfPassword.getText());
        }
    }//GEN-LAST:event_btnLoginActionPerformed
    
    public static CreateAccountFrame ca;
    
    private void btnCreateAccountActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAccountActionPerformed
        if(ca == null){
         ca = new CreateAccountFrame();}
        ca.setVisible(true);
        lg.setVisible(false);
    }//GEN-LAST:event_btnCreateAccountActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        try {
            dos.writeUTF("logout");
            s.close();
            this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
        } catch (IOException ex) {
            Logger.getLogger(LoginFrame.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_btnExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static LoginFrame lg;

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                lg = new LoginFrame();
                lg.setVisible(true);
                try {
//                    getting localhost ip
//                    InetAddress ip = InetAddress.getByName("localhost");
//                    InetAddress ip = InetAddress.getByName("102.39.215.168");
InetAddress ip = InetAddress.getByName(ipAddress);
//                    establish the connection
//                    Socket s = new Socket(ip, serverPort); OUD
                    s = new Socket(ip, 2345);
                    dis = new DataInputStream(s.getInputStream());
                    dos = new DataOutputStream(s.getOutputStream());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    public void checkLoginDetails(String username, String password) {

//        sendMessage thread
        Thread sendMessage = new Thread(new Runnable() {
            @Override
            public void run() {

                //read message to deliver
                String msg = "checkUsernameAndPassword#" + username + "#" + password;

                try {
                    //write on the output stream
                    dos.writeUTF(msg);
                    dos.flush();
                } catch (SocketException e) {
//                            e.printStackTrace();
//                            break; 
                } catch (EOFException e) {
//                            e.printStackTrace();
//                            break;
                } catch (IOException e) {
//                       e.printStackTrace();
//                        break;
                }
            }
        });

//        readMessage thread
        Thread readMessage = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
//                    read the message sent to this client 
                    String msg = dis.readUTF();
//                    System.out.println(msg);
                    StringTokenizer st = new StringTokenizer(msg, "#");
                    String userAction = st.nextToken();
                    usernameReply = Boolean.valueOf(st.nextToken());
                    passwordReply = Boolean.valueOf(st.nextToken());
                    if (usernameReply && passwordReply) {
                        JOptionPane.showMessageDialog(LoginFrame.this, "Welcome " + username + "!");

                        CentralGui cf = new CentralGui(jtfUsername.getText());
                        cf.runSomething();
                        cf.setVisible(true);
                        cf.jlblCurrentUser.setText(cf.jlblCurrentUser.getText() + jtfUsername.getText());

                        cf.username = jtfUsername.getText();
                        lg.dispatchEvent(new WindowEvent(lg, WindowEvent.WINDOW_CLOSING));

                    } else {
                        JOptionPane.showMessageDialog(LoginFrame.this, "Please enter valid input", "Username and/or Password Incorrect", JOptionPane.ERROR_MESSAGE);
                    }

                } catch (EOFException e) {
//                            e.printStackTrace();
//                            break;
                } catch (IOException e) {
//                            e.printStackTrace();
//                            break;
                }
            }
        });
        sendMessage.start();
        readMessage.start();
    }

    private boolean testInputFields() {
        boolean inputValid = true;
        if (((jtfUsername.getText()).trim()).length() == 0) {
            JOptionPane.showMessageDialog(this, "Please enter valid input", "Username Input Lacking", JOptionPane.ERROR_MESSAGE);
            inputValid = false;
        } else if (((jtfPassword.getText()).trim()).length() == 0) {
            JOptionPane.showMessageDialog(this, "Please enter valid input", "Password Input Lacking", JOptionPane.ERROR_MESSAGE);
            inputValid = false;
        }

        return inputValid;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton btnCreateAccount;
    public javax.swing.JButton btnExit;
    public javax.swing.JButton btnLogin;
    public javax.swing.JLabel jlbPassword;
    public javax.swing.JLabel jlbUsername;
    public javax.swing.JTextField jtfPassword;
    public static javax.swing.JTextField jtfUsername;
    // End of variables declaration//GEN-END:variables
}
