/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package clientPackage;

import com.mongodb.BasicDBObject;
import com.mongodb.MongoClient;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import java.awt.event.WindowEvent;
import java.io.EOFException;
import java.io.IOException;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.bson.Document;
import static clientPackage.LoginFrame.dis;
import static clientPackage.LoginFrame.dos;
import static clientPackage.LoginFrame.s;

/**
 *
 * @author Aidan
 */
public class CentralGui extends javax.swing.JFrame {

    /**
     * Creates new form CentralGui
     */
    public CentralGui(String username) {
        initComponents();
        this.username = username;
    }

    static String sender;
    static String message;
    static String receiver;
    static ArrayList<String> person = new ArrayList<>();
    static String username;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jtfMessage = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jltAllOtherUsers = new javax.swing.JList<>();
        btnLogOut = new javax.swing.JButton();
        jlblCurrentUser = new javax.swing.JLabel();
        jlblOtherUsers = new javax.swing.JLabel();
        jlblMessageToSend = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnSend.setText("Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jltAllOtherUsers.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jltAllOtherUsers.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jltAllOtherUsersValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jltAllOtherUsers);

        btnLogOut.setText("Log Out");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        jlblCurrentUser.setText("Logged-in User: ");

        jlblOtherUsers.setText("Other Users");

        jlblMessageToSend.setText("Message to send:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jlblCurrentUser)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(179, 179, 179)
                                        .addComponent(btnLogOut, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 233, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlblOtherUsers)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jtfMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jlblMessageToSend))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblCurrentUser)
                    .addComponent(jlblOtherUsers))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jlblMessageToSend)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfMessage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnSend)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnLogOut)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed

        if (testInputFields()) {

            sendMessage(jtfMessage.getText(), jltAllOtherUsers.getSelectedValue().substring(0, jltAllOtherUsers.getSelectedValue().lastIndexOf(':') - 1), username);
        }
    }//GEN-LAST:event_btnSendActionPerformed

    private void jltAllOtherUsersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jltAllOtherUsersValueChanged
            if(jltAllOtherUsers.getSelectedValue() == null){
            jltAllOtherUsers.setSelectedIndex(0);
            }
        showSavedChats(jltAllOtherUsers.getSelectedValue().substring(0, jltAllOtherUsers.getSelectedValue().lastIndexOf(':') - 1));
                    
    }//GEN-LAST:event_jltAllOtherUsersValueChanged

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed

        try {
            dos.writeUTF("logout");
            s.close();

            this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));

        } catch (IOException e) {
//            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLogOutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CentralGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CentralGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CentralGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CentralGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CentralGui(LoginFrame.jtfUsername.getText()).setVisible(true);
            }
        });

    }

    public static void runSomething() {

        try {
            dos.writeUTF("isAlreadyLoggedIn#" + username);
        } catch (IOException e) {
            e.printStackTrace();
        }

//        readMessage thread
        Thread readMessage = new Thread(new Runnable() {
            @Override
            public void run() {
                while (true) {
                    try {
//                        read the message sent to this client 
                        String msg = dis.readUTF();
//                        System.out.println(msg);
                        StringTokenizer st = new StringTokenizer(msg, "#");
                        String userAction = st.nextToken();
                        if (userAction.equals("receiveMessage")) {
                            String sender = st.nextToken();
                            String message = st.nextToken();
                            String receiver = st.nextToken();

//                            System.out.println("receiver= " + receiver + " sender= " + sender + " sent this message= " + message);

                            receiveMessage(sender, message, receiver);

                            if (jltAllOtherUsers.getSelectedValue() != null) {
                                showSavedChats(jltAllOtherUsers.getSelectedValue().substring(0, jltAllOtherUsers.getSelectedValue().lastIndexOf(':') - 1));

                            }
                        } else if (userAction.equals("populateList")) {
                            populateList(msg);
                        }

                    } catch (EOFException e) {
//                                 break;
//                           e.printStackTrace();
                    } catch (IOException e) {
//                               e.printStackTrace();
//                              break;
                    }
                }
            }
        }
        );
        readMessage.start();
    }

    private boolean testInputFields() {
        boolean inputValid = true;

        if (((jtfMessage.getText()).trim()).length() == 0) {
            JOptionPane.showMessageDialog(this, "Please enter valid input", "Message Input Lacking", JOptionPane.ERROR_MESSAGE);
            inputValid = false;
        }

        return inputValid;
    }

    private void sendMessage(String message, String receiver, String sender) {
//        System.out.println("sendmessage thread");
        String msg = "sendMessage#" + sender + "#" + message + "#" + receiver;
        try {
//            write on the output stream
            dos.writeUTF(msg);
            dos.flush();
        } catch (SocketException e) {
//                  e.printStackTrace();
//                  break; 
        } catch (IOException e) {
//                  e.printStackTrace();
//                  break;
        }
    }

    public static void receiveMessage(String sender, String message, String recipient) {
        MongoClient mongoClient = new MongoClient("localhost");

        MongoDatabase mongoDatabase = mongoClient.getDatabase("clientDB");

        boolean colExits = false;
        MongoCollection<Document> collection = null;
        for (String name : mongoDatabase.listCollectionNames()) {

            if (name.equals("messages")) {
                colExits = true;
                break;
            }
        }
        if (colExits) {
            collection = mongoDatabase.getCollection("messages");

        } else {

            mongoDatabase.createCollection("messages");
            collection = mongoDatabase.getCollection("messages");
        }

        Document doc = new Document("Sender", sender).append("Recipient", recipient).append("Message", message);

        collection.insertOne(doc);
//        System.out.println("Document inserted successfully");
//        System.out.println(doc.toString());
        mongoClient.close();
    }

    private static void populateList(String msg) {
        StringTokenizer st = new StringTokenizer(msg, "#");
        String nextUser = " ";
        jltAllOtherUsers.removeAll();
        DefaultListModel def = new DefaultListModel();

        person = new ArrayList<>();
        nextUser = st.nextToken();
        String nextStatus = " ";
        while (st.hasMoreElements() && !nextUser.equals("endOfList")) {

            nextUser = st.nextToken();
            if (!nextUser.equals("endOfList")) {
                nextStatus = st.nextToken();
            } else {
                continue;
            }
            person.add(nextUser + " : " + nextStatus);
        }
        UpdateJList();
    }
    static DefaultListModel<String> model;

    private static void UpdateJList() {
        model = new DefaultListModel<String>();
        for (String p : person) {
            if (!p.substring(0, p.lastIndexOf(':') - 1).equals(username)) {
                model.addElement(p.toString());
            }
        }

        jltAllOtherUsers.setModel(model);
    }

    private static void showSavedChats(String chatFriend) {
        MongoClient mongoClient = new MongoClient("localhost");

        MongoDatabase mongoDatabase = mongoClient.getDatabase("clientDB");

        boolean colExits = false;
        MongoCollection<Document> collection = null;
        for (String name : mongoDatabase.listCollectionNames()) {

            if (name.equals("messages")) {
                colExits = true;
                break;
            }
        }
        if (colExits) {
            collection = mongoDatabase.getCollection("messages");

        } else {

            mongoDatabase.createCollection("messages");
            collection = mongoDatabase.getCollection("messages");
        }

        BasicDBObject query = new BasicDBObject();
        query.put("$or", new BasicDBObject[]{new BasicDBObject("Sender", username), new BasicDBObject("Recipient", username), new BasicDBObject("Sender", chatFriend), new BasicDBObject("Recipient", chatFriend)});
        FindIterable<Document> cursor = collection.find(query);
        jTextArea1.setText("");
        for (Document doc : cursor) {
            if (((doc.get("Recipient", String.class)).equals(chatFriend) && ((doc.get("Sender", String.class)).equals(username)))
                    || ((doc.get("Recipient", String.class)).equals(username) && ((doc.get("Sender", String.class)).equals(chatFriend)))) {

                jTextArea1.append("#" + doc.get("Sender", String.class) + ":"
                        + doc.get("Message", String.class) + "\n");
            }
        }
        jTextArea1.setCaretPosition(jTextArea1.getDocument().getLength());

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnSend;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private static javax.swing.JTextArea jTextArea1;
    public static javax.swing.JLabel jlblCurrentUser;
    private javax.swing.JLabel jlblMessageToSend;
    private javax.swing.JLabel jlblOtherUsers;
    private static javax.swing.JList<String> jltAllOtherUsers;
    private javax.swing.JTextField jtfMessage;
    // End of variables declaration//GEN-END:variables
}
